USE [PowerTool_UAT]

--DECLARE VARIABLES
DECLARE @SCRUB_TABLE_NAME NVARCHAR(500),
		@SCRUB_COLUMN_NAME NVARCHAR (500),
		@SCRUB_DATA_TYPE NVARCHAR(50),
		@SCRUB_CHAR_MAX_LENTH INT,
		@SCRUB_NUMERIC_PRECISION TINYINT,
		@SCRUN_NUMERIC_SCALE INT,
		@ITERATOR INT,
		@SQL_STATEMENT NVARCHAR(MAX),
		@SQL_PARAM NVARCHAR(MAX),
		@DATABASE_NAME VARCHAR(100) = 'PowerTool_UAT',
		@SCHEMA_NAME VARCHAR(5) = 'dbo'
		;


--LOAD THE FOREIGN KEY INTO A LOOK UP TABLE
SELECT * INTO ##FK_LOOKUP_TABLE FROM 
(SELECT  obj.name AS FK_NAME,
    sch.name AS [schema_name],
    tab1.name AS [table],
    col1.name AS [column],
    tab2.name AS [referenced_table],
    col2.name AS [referenced_column]
FROM sys.foreign_key_columns fkc
INNER JOIN sys.objects obj
    ON obj.object_id = fkc.constraint_object_id
INNER JOIN sys.tables tab1
    ON tab1.object_id = fkc.parent_object_id
INNER JOIN sys.schemas sch
    ON tab1.schema_id = sch.schema_id
INNER JOIN sys.columns col1
    ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id
INNER JOIN sys.tables tab2
    ON tab2.object_id = fkc.referenced_object_id
INNER JOIN sys.columns col2
    ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id)SUB


--CREATE LOOKUP TABLE WITHOUT FOREIGN KEYS
USE [PowerTool_UAT]
SELECT C.[TABLE_NAME],C.[COLUMN_NAME],C.[DATA_TYPE],C.[CHARACTER_MAXIMUM_LENGTH],C.[NUMERIC_PRECISION], C.[NUMERIC_SCALE] INTO ##SCRUMBLE_LOOKUP_TABLE
FROM [PowerTool_UAT].[INFORMATION_SCHEMA].[TABLES] T
  INNER JOIN [PowerTool_UAT].[INFORMATION_SCHEMA].[COLUMNS] C ON T.TABLE_CATALOG = C.TABLE_CATALOG AND T.TABLE_NAME = C.TABLE_NAME
  WHERE T.TABLE_TYPE = 'BASE TABLE' AND [COLUMN_NAME] NOT IN (SELECT [column] FROM ##FK_LOOKUP_TABLE WHERE C.[TABLE_NAME] = [table]) AND C.[COLUMN_NAME] NOT IN (SELECT [referenced_column] FROM ##FK_LOOKUP_TABLE WHERE C.[TABLE_NAME] = [referenced_table])

-- DELETE COLUMNS THAT ARE PRIMARY KEY FROM THE LOOKUP TABLE
DELETE L
FROM ##SCRUMBLE_LOOKUP_TABLE L
INNER JOIN (select col.[name] as column_name, 
    tab.[name] as table_name
from sys.tables tab
    inner join sys.indexes pk
        on tab.object_id = pk.object_id 
        and pk.is_primary_key = 1
    inner join sys.index_columns ic
        on ic.object_id = pk.object_id
        and ic.index_id = pk.index_id
    inner join sys.columns col
        on pk.object_id = col.object_id
        and col.column_id = ic.column_id) T
		ON T.table_name = L.TABLE_NAME AND T.column_name = L.COLUMN_NAME



--SELECT * FROM ##FK_LOOKUP_TABLE --WHERE [table] = 'Account' OR  [referenced_table] = 'Account' ORDER BY [table]
--SELECT * FROM ##SCRUMBLE_LOOKUP_TABLE ORDER BY TABLE_NAME-- WHERE [TABLE_NAME] = 'Account' ORDER BY [TABLE_NAME]

SET @ITERATOR = (SELECT COUNT(*) FROM ##SCRUMBLE_LOOKUP_TABLE);

WHILE @ITERATOR >= 0
	BEGIN
		
		SET @SQL_STATEMENT = N''
		SELECT TOP 1 @SCRUB_TABLE_NAME =[TABLE_NAME],@SCRUB_COLUMN_NAME = [COLUMN_NAME], @SCRUB_DATA_TYPE = [DATA_TYPE],@SCRUB_CHAR_MAX_LENTH = ISNULL([CHARACTER_MAXIMUM_LENGTH],0),@SCRUB_NUMERIC_PRECISION = ISNULL([NUMERIC_PRECISION],0),@SCRUN_NUMERIC_SCALE = ISNULL([NUMERIC_SCALE],0)  FROM ##SCRUMBLE_LOOKUP_TABLE
		--PRINT QUOTENAME(@SCRUB_TABLE_NAME)+'.'+QUOTENAME(@SCRUB_COLUMN_NAME) + ' has data type of: '+ @SCRUB_DATA_TYPE+ ' max length: '+CAST(@SCRUB_CHAR_MAX_LENTH AS VARCHAR)+ ' numeric precision: '+ CAST(@SCRUB_NUMERIC_PRECISION AS VARCHAR)
		--PRINT 'DATA TYPE IS: '+ @SCRUB_DATA_TYPE;
		PRINT 'REMAINING COLUMNS TO SCRUB: '+ CAST(@ITERATOR AS VARCHAR)
		
		--HANDLE THE VARCHAR/NVARCHAR
		IF (UPPER(@SCRUB_DATA_TYPE) = UPPER('varchar') OR UPPER(@SCRUB_DATA_TYPE) = UPPER('nvarchar'))
        BEGIN
			--HANDLE THE VARCHARMAX CHARS
			IF @SCRUB_CHAR_MAX_LENTH < 0
			BEGIN
				SET @SCRUB_CHAR_MAX_LENTH = 4000;
			END--END OF IF CONDITION : VARCHARMAX
            --IF THE CHAR IS NOT AN EMAIL ADDRESS
			SET @SQL_STATEMENT = N'UPDATE '+ QUOTENAME(@DATABASE_NAME)+N'.'+QUOTENAME(@SCHEMA_NAME)+N'.'+QUOTENAME(@SCRUB_TABLE_NAME)+N' SET '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' = SUBSTRING(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(NEWID(),''0'',CHAR(Cast(RAND()*(122-97)+97 as int))),''1'',CHAR(Cast(RAND()*(122-97)+97 as int))),''2'',CHAR(Cast(RAND()*(122-97)+97 as int))),''3'',CHAR(Cast(RAND()*(122-97)+97 as int))),''4'',CHAR(Cast(RAND()*(122-97)+97 as int))),''5'',CHAR(Cast(RAND()*(122-97)+97 as int))),''6'',CHAR(Cast(RAND()*(122-97)+97 as int))),''7'',CHAR(Cast(RAND()*(122-97)+97 as int))),''8'',CHAR(Cast(RAND()*(122-97)+97 as int))),''9'',CHAR(Cast(RAND()*(122-97)+97 as int))),''-'',CHAR(Cast(RAND()*(122-97)+97 as int))),0,'+CAST(@SCRUB_CHAR_MAX_LENTH AS NVARCHAR)+') WHERE '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' NOT LIKE ''%_@__%.__%'' OR  PATINDEX(''%[^a-z,0-9,@,.,_,\-]%'',  '+ QUOTENAME(@SCRUB_COLUMN_NAME)+ N') != 0'
			--PRINT @SQL_STATEMENT;
			
			EXECUTE (@SQL_STATEMENT);
			--IF THE DATA IS EMAIL ADDRESS
			SET @SQL_STATEMENT = N'UPDATE '+ QUOTENAME(@DATABASE_NAME)+N'.'+QUOTENAME(@SCHEMA_NAME)+N'.'+QUOTENAME(@SCRUB_TABLE_NAME)+N' SET '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' = SUBSTRING(CONCAT(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(NEWID(),''0'',CHAR(Cast(RAND()*(122-97)+97 as int))),''1'',CHAR(Cast(RAND()*(122-97)+97 as int))),''2'',CHAR(Cast(RAND()*(122-97)+97 as int))),''3'',CHAR(Cast(RAND()*(122-97)+97 as int))),''4'',CHAR(Cast(RAND()*(122-97)+97 as int))),''5'',CHAR(Cast(RAND()*(122-97)+97 as int))),''6'',CHAR(Cast(RAND()*(122-97)+97 as int))),''7'',CHAR(Cast(RAND()*(122-97)+97 as int))),''8'',CHAR(Cast(RAND()*(122-97)+97 as int))),''9'',CHAR(Cast(RAND()*(122-97)+97 as int))),''-'',CHAR(Cast(RAND()*(122-97)+97 as int))), ''@XYZ.COM''),0,'+CAST(@SCRUB_CHAR_MAX_LENTH AS NVARCHAR)+') WHERE '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' LIKE ''%_@__%.__%'' AND  PATINDEX(''%[^a-z,0-9,@,.,_,\-]%'',  '+ QUOTENAME(@SCRUB_COLUMN_NAME)+ N') = 0'
			--PRINT @SQL_STATEMENT;
			EXECUTE (@SQL_STATEMENT);
        END --END OF IF CONDITION : VARCHAR

		--HANDLE THE DATE/TIME TYPE
		ELSE IF (UPPER(@SCRUB_DATA_TYPE) = UPPER('date') OR UPPER(@SCRUB_DATA_TYPE) = UPPER('datetime') OR UPPER(@SCRUB_DATA_TYPE) = UPPER('datetimeoffset'))
		BEGIN
			SET @SQL_STATEMENT = N'UPDATE '+ QUOTENAME(@DATABASE_NAME)+N'.'+QUOTENAME(@SCHEMA_NAME)+N'.'+QUOTENAME(@SCRUB_TABLE_NAME)+N' SET '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' = DATEADD(day, (ABS(CHECKSUM(NEWID())) % 65530), 0)'
			--PRINT @SQL_STATEMENT;
			EXECUTE (@SQL_STATEMENT);

		END --END OF IF CONDITION : DATE/TIME
		--HANDLE THE BIGINT AND INT DATA TYPE
		ELSE IF (UPPER(@SCRUB_DATA_TYPE) = UPPER('bigint') OR UPPER(@SCRUB_DATA_TYPE) = UPPER('int'))
		BEGIN
			SET @SQL_STATEMENT = N'UPDATE '+ QUOTENAME(@DATABASE_NAME)+N'.'+QUOTENAME(@SCHEMA_NAME)+N'.'+QUOTENAME(@SCRUB_TABLE_NAME)+N' SET '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' = ABS(CHECKSUM(NEWID()))'
			--PRINT @SQL_STATEMENT;
			EXECUTE (@SQL_STATEMENT);
		END --END OF IF CONDITION : BIG/INT
		--HANDLE THE FLOAT DATA TYPE
		ELSE IF (UPPER(@SCRUB_DATA_TYPE) = UPPER('float'))
		BEGIN
			SET @SQL_STATEMENT = N'UPDATE '+ QUOTENAME(@DATABASE_NAME)+N'.'+QUOTENAME(@SCHEMA_NAME)+N'.'+QUOTENAME(@SCRUB_TABLE_NAME)+N' SET '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' = CAST(ABS(CHECKSUM(NEWID())/rand()) AS FLOAT)'
			--PRINT @SQL_STATEMENT;
			EXECUTE (@SQL_STATEMENT);
		END --END OF IF CONDITION : FLOAT
		--HANDLE THE DECIMAL DATA TYPE
		ELSE IF (UPPER(@SCRUB_DATA_TYPE) = UPPER('decimal'))
		BEGIN
			SET @SQL_STATEMENT = N'UPDATE '+ QUOTENAME(@DATABASE_NAME)+N'.'+QUOTENAME(@SCHEMA_NAME)+N'.'+QUOTENAME(@SCRUB_TABLE_NAME)+N' SET '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' = CAST(ABS(CHECKSUM(NEWID()))%1000 AS DECIMAL ('+CAST(@SCRUB_NUMERIC_PRECISION AS NVARCHAR)+','+CAST(@SCRUN_NUMERIC_SCALE AS NVARCHAR)+'))'
			--PRINT @SQL_STATEMENT;
			EXECUTE (@SQL_STATEMENT);
		END --END OF IF CONDITION :DECIMAL
		--HANDLE THE BIT DATA TYPE
		ELSE IF (UPPER(@SCRUB_DATA_TYPE) = UPPER('bit'))
		BEGIN
			SET @SQL_STATEMENT = N'UPDATE '+ QUOTENAME(@DATABASE_NAME)+N'.'+QUOTENAME(@SCHEMA_NAME)+N'.'+QUOTENAME(@SCRUB_TABLE_NAME)+N' SET '+QUOTENAME(@SCRUB_COLUMN_NAME)+N' = CAST(ABS(CHECKSUM(NEWID())/rand()) AS BIT)'
			--PRINT @SQL_STATEMENT;
			EXECUTE (@SQL_STATEMENT);
		END --END OF IF CONDITION : BIT
		--DELETE THE ROW
		DELETE FROM  ##SCRUMBLE_LOOKUP_TABLE WHERE [TABLE_NAME] =  @SCRUB_TABLE_NAME AND [COLUMN_NAME] = @SCRUB_COLUMN_NAME AND [DATA_TYPE] = @SCRUB_DATA_TYPE ;
	SET @ITERATOR = @ITERATOR - 1;
	PRINT 'COLUMN: '+UPPER(@SCRUB_COLUMN_NAME)+' OF '+QUOTENAME(@DATABASE_NAME)+'.[DBO].'+QUOTENAME(@SCRUB_TABLE_NAME)+ ' has been masked'

	END --END OF WHILE LOOP

--DROP TEMP TABLE 
DROP TABLE ##FK_LOOKUP_TABLE
DROP TABLE ##SCRUMBLE_LOOKUP_TABLE

