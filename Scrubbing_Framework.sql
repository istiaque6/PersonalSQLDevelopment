USE [AFS_UTILITIES]
GO

/****** Object:  StoredProcedure [dbo].[SP_AFS_DBA_SCRUBBING_FRAMEWORK]    Script Date: 12/20/2019 10:55:45 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Istiaque Hassan
-- Create date: 12/20/2019
-- Description:	This store proc is the underlying framework for scrubbing the data. 
--				It takes database name, table name and column name (as comma seperated values) as input and replace the column values with dynamic length values.
-- =============================================
ALTER PROCEDURE [dbo].[SP_AFS_DBA_SCRUBBING_FRAMEWORK]
	-- Add the parameters for the stored procedure here
	@DATABASE_NAME VARCHAR(100),
	--EXAMPLE:		'AFSDEV',
	@TABLE_NAME VARCHAR(100),
	--EXAMPLE:		'HR_Leavers',
	@COLUMN_NAME VARCHAR(MAX)
	--EXAMPLE:		'Employee Name,Enterprise ID,Employee Email' <-- Note: comma seperated value
AS
BEGIN
	DECLARE @SQL_STATEMENT NVARCHAR(MAX),
		@PARAM_STATEMENT NVARCHAR(MAX),
		@ITERATOR INT,
		@INDEX INT = 0,
		@START INT = 0,
		@MASKED_COLUMN_NAME VARCHAR(100),
		@DATA_TYPE VARCHAR(100),
		@DATA_LENGTH INT;

	SET @COLUMN_NAME = CONCAT (
			@COLUMN_NAME,
			','
			);
	-- ADDED AN EXTRA COLUMN SO THAT IT CAN BE SEPERATE IN THE WHILE LOOP
	----PRINT @COLUMN_NAME
	--SET THE ITERATOR
	SET @ITERATOR = CAST((DATALENGTH(@COLUMN_NAME) - DATALENGTH(REPLACE(@COLUMN_NAME, ',', ''))) / DATALENGTH(',') AS INT);

	----PRINT @ITERATOR;
	--INPLACE MASKING
	WHILE @ITERATOR > 0
	BEGIN
		SET @INDEX = CHARINDEX(',', @COLUMN_NAME, @INDEX);
		----PRINT 'INDEX IS: '+ CAST(@INDEX AS VARCHAR);
		----PRINT 'START IS: '+CAST(@START AS VARCHAR);
		SET @MASKED_COLUMN_NAME = SUBSTRING(@COLUMN_NAME, @START + 1, @INDEX - @START - 1)
		----PRINT @MASKED_COLUMN_NAME;
		--INITIATE INPLACE MASKING
		--FIND THE DATA TYPE
		-- --PRINT QUOTENAME(@DATABASE_NAME)
		SET @SQL_STATEMENT = N'SELECT @DATA_TYPE = DATA_TYPE, @DATA_LENGTH = CHARACTER_MAXIMUM_LENGTH FROM ' + QUOTENAME(@DATABASE_NAME) + '.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TABLE_NAME AND COLUMN_NAME = @MASKED_COLUMN_NAME';
		SET @PARAM_STATEMENT = N'@DATA_TYPE  VARCHAR(100) OUTPUT, @TABLE_NAME VARCHAR(100),@MASKED_COLUMN_NAME VARCHAR (100), @DATABASE_NAME VARCHAR(100), @DATA_LENGTH INT OUTPUT';

		EXECUTE sp_executesql @SQL_STATEMENT,
			@PARAM_STATEMENT,
			@TABLE_NAME = @TABLE_NAME,
			@MASKED_COLUMN_NAME = @MASKED_COLUMN_NAME,
			@DATA_TYPE = @DATA_TYPE OUTPUT,
			@DATABASE_NAME = @DATABASE_NAME,
			@DATA_LENGTH = @DATA_LENGTH OUTPUT;

		----PRINT @DATA_TYPE;
		----PRINT @DATA_LENGTH;
		IF (UPPER(@DATA_TYPE) = UPPER('varchar'))
		BEGIN
			DECLARE @RANGE VARCHAR(100) = 'ABCDEFGHJKLMNPQURSUVWXYZabcdefghjkmnpqursuvwxyz',
				@ITERATOR_COLUMN_VALUE VARCHAR(100),
				@ROW_ITERATOR INT = 0;

			--47 LENGTH
			-- PICK RANDOM CHAR FROM THE RANGE WITH RANDOM TIMES (AT MAX 30 TIMES)
			--ROW BY ROW IMPLEMENTATION
			SET @SQL_STATEMENT = N'SET @ROW_ITERATOR = (SELECT COUNT(*) FROM ' + QUOTENAME(@DATABASE_NAME) + N'..' + QUOTENAME(@TABLE_NAME) + N')';
			----PRINT @SQL_STATEMENT;
			SET @PARAM_STATEMENT = N'@ROW_ITERATOR INT OUTPUT';

			EXECUTE sp_executesql @SQL_STATEMENT,
				@PARAM_STATEMENT,
				@ROW_ITERATOR = @ROW_ITERATOR OUTPUT;

			--POPULATE THE TEMP TABLE WITH THE INFORMATION FOR LOOPING
			SET @SQL_STATEMENT = 'SELECT ' + QUOTENAME(@MASKED_COLUMN_NAME) + ' INTO ##TEMP_SCRUBBUNG_TABLE FROM ' + QUOTENAME(@DATABASE_NAME) + N'..' + QUOTENAME(@TABLE_NAME)

			--SELECT @SQL_STATEMENT
			EXECUTE (@SQL_STATEMENT);

			--SELECT * FROM ##TEMP_SCRUBBUNG_TABLE
			WHILE @ROW_ITERATOR > 0
			BEGIN
				--PICK UP A SINGLE ROW
				SET @SQL_STATEMENT = N'SET @ITERATOR_COLUMN_VALUE = (SELECT TOP (1)  ' + QUOTENAME(@MASKED_COLUMN_NAME) + N' FROM ##TEMP_SCRUBBUNG_TABLE )';
				--PRINT @SQL_STATEMENT;
				SET @PARAM_STATEMENT = N'@ITERATOR_COLUMN_VALUE VARCHAR (100) OUTPUT, @MASKED_COLUMN_NAME VARCHAR (100)';

				EXECUTE sp_executesql @SQL_STATEMENT,
					@PARAM_STATEMENT,
					@ITERATOR_COLUMN_VALUE = @ITERATOR_COLUMN_VALUE OUTPUT,
					@MASKED_COLUMN_NAME = @MASKED_COLUMN_NAME;

				SET @ITERATOR_COLUMN_VALUE = REPLACE(@ITERATOR_COLUMN_VALUE, '''', '''''');
				-- ADD ESCAPE CHAR.
				--APPLY THE SCRUBBING
				--BUILD THE DYNAMIC STRING
				SET @SQL_STATEMENT = N' CONCAT ( ' + REPLICATE('LEFT(SUBSTRING(@RANGE, CAST(FLOOR(RAND()*LEN(@RANGE)) AS INT), CAST(FLOOR(RAND()*LEN(@RANGE)) AS INT)), 1),', (CAST(FLOOR(RAND() * @DATA_LENGTH) AS INT) % 30) + 2) + ')';

				--IF THE VALUE IS NULL OR BLANK REMOVE THE FILTER ELSE ADD THE FILTER
				IF @ITERATOR_COLUMN_VALUE IS NULL
				BEGIN
					SET @SQL_STATEMENT = N'USE ' + QUOTENAME(@DATABASE_NAME) + ' UPDATE ' + QUOTENAME(@TABLE_NAME) + ' SET ' + QUOTENAME(@MASKED_COLUMN_NAME) + ' = ' + SUBSTRING(@SQL_STATEMENT, 0, LEN(@SQL_STATEMENT) - 1) + ')' + ' WHERE ' + QUOTENAME(@MASKED_COLUMN_NAME) + ' IS NULL ';
				END
				ELSE
				BEGIN
					IF LEN(@ITERATOR_COLUMN_VALUE) < 1
					BEGIN
						SET @SQL_STATEMENT = N'USE ' + QUOTENAME(@DATABASE_NAME) + ' UPDATE ' + QUOTENAME(@TABLE_NAME) + ' SET ' + QUOTENAME(@MASKED_COLUMN_NAME) + ' = ' + SUBSTRING(@SQL_STATEMENT, 0, LEN(@SQL_STATEMENT) - 1) + ')' + ' WHERE LEN(' + QUOTENAME(@MASKED_COLUMN_NAME) + ') = 0 ';
					END
					ELSE
					BEGIN
						SET @SQL_STATEMENT = N'USE ' + QUOTENAME(@DATABASE_NAME) + ' UPDATE ' + QUOTENAME(@TABLE_NAME) + ' SET ' + QUOTENAME(@MASKED_COLUMN_NAME) + ' = ' + SUBSTRING(@SQL_STATEMENT, 0, LEN(@SQL_STATEMENT) - 1) + ')' + ' WHERE ' + QUOTENAME(@MASKED_COLUMN_NAME) + ' = ''' + @ITERATOR_COLUMN_VALUE + '''';
					END
				END

				--PRINT @SQL_STATEMENT;
				SET @PARAM_STATEMENT = N'@RANGE VARCHAR (100)';

				EXECUTE sp_executesql @SQL_STATEMENT,
					@PARAM_STATEMENT,
					@RANGE = @RANGE;

				--PRINT 'VALUE IS MASKED: '+ISNULL(@ITERATOR_COLUMN_VALUE, 'NULL');
				-- DELETE ANYTHING WITH NULL VALUE
				IF @ITERATOR_COLUMN_VALUE IS NULL
				BEGIN
					SET @SQL_STATEMENT = 'DELETE FROM ##TEMP_SCRUBBUNG_TABLE WHERE ' + QUOTENAME(@MASKED_COLUMN_NAME) + ' IS NULL';
				END
				ELSE
				BEGIN
					--DELETE ANYTHING WITH 0 LENGTH
					IF LEN(@ITERATOR_COLUMN_VALUE) < 1
					BEGIN
						SET @SQL_STATEMENT = 'DELETE FROM ##TEMP_SCRUBBUNG_TABLE WHERE LEN(' + QUOTENAME(@MASKED_COLUMN_NAME) + ') = 0';
					END
					ELSE
					BEGIN
						SET @SQL_STATEMENT = 'DELETE FROM ##TEMP_SCRUBBUNG_TABLE WHERE ' + QUOTENAME(@MASKED_COLUMN_NAME) + ' = ''' + @ITERATOR_COLUMN_VALUE + '''';
					END
				END

				--PRINT @SQL_STATEMENT
				EXECUTE (@SQL_STATEMENT);

				--UPDATE THE ROW ITERATOR 
				SET @SQL_STATEMENT = N'SET @ROW_ITERATOR = (SELECT COUNT(*) FROM ##TEMP_SCRUBBUNG_TABLE)';
				----PRINT @SQL_STATEMENT;
				SET @PARAM_STATEMENT = N'@ROW_ITERATOR INT OUTPUT';

				EXECUTE sp_executesql @SQL_STATEMENT,
					@PARAM_STATEMENT,
					@ROW_ITERATOR = @ROW_ITERATOR OUTPUT;
					--PRINT @ROW_ITERATOR
			END

			-- END OF INNER WHILE LOOP
			--DROP THE TEMP TABLE
			DROP TABLE ##TEMP_SCRUBBUNG_TABLE
		END

		--END OF IF CONDITION : VARCHAR
		SET @START = @INDEX;
		SET @ITERATOR = @ITERATOR - 1;
		SET @INDEX = @INDEX + 1;

		SELECT QUOTENAME(@DATABASE_NAME) + '.' + QUOTENAME(@TABLE_NAME) + '.' + QUOTENAME(@MASKED_COLUMN_NAME) + ' HAS BEEN SCRUBBED'
	END
END
